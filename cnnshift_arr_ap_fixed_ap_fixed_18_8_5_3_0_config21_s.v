// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnnshift_arr_ap_fixed_ap_fixed_18_8_5_3_0_config21_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] data_V_address0;
output   data_V_ce0;
input  [17:0] data_V_q0;
output  [8:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [17:0] output_V_d0;
input  [17:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg[8:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[17:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] linebuffer_V_8_address0;
reg    linebuffer_V_8_ce0;
reg    linebuffer_V_8_we0;
reg   [17:0] linebuffer_V_8_d0;
wire   [17:0] linebuffer_V_8_q0;
wire   [5:0] i0_fu_291_p2;
reg   [5:0] i0_reg_877;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln246_fu_285_p2;
wire   [10:0] zext_ln203_50_fu_302_p1;
reg   [10:0] zext_ln203_50_reg_887;
wire    ap_CS_fsm_state3;
wire   [9:0] zext_ln203_51_fu_306_p1;
reg   [9:0] zext_ln203_51_reg_894;
wire   [8:0] zext_ln203_52_fu_310_p1;
reg   [8:0] zext_ln203_52_reg_899;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln250_fu_329_p2;
wire   [1:0] add_ln255_fu_381_p2;
reg   [1:0] add_ln255_reg_913;
wire  signed [8:0] sub_ln255_fu_411_p2;
reg  signed [8:0] sub_ln255_reg_918;
wire   [17:0] tmpinput_V_q0;
reg   [17:0] tmp1_V_reg_928;
wire    ap_CS_fsm_state5;
wire   [5:0] zext_ln255_fu_431_p1;
reg   [5:0] zext_ln255_reg_933;
reg   [9:0] linebuffer_V_8_addr_1_reg_939;
reg   [17:0] tmp_V_reg_944;
wire   [3:0] i2_fu_459_p2;
reg   [3:0] i2_reg_952;
wire    ap_CS_fsm_state6;
wire   [10:0] add_ln203_63_fu_512_p2;
reg   [10:0] add_ln203_63_reg_957;
wire   [0:0] icmp_ln258_fu_453_p2;
wire   [1:0] i1_fu_620_p2;
wire   [1:0] i0_4_fu_636_p2;
reg   [1:0] i0_4_reg_975;
wire    ap_CS_fsm_state8;
wire  signed [8:0] sext_ln192_fu_676_p1;
reg  signed [8:0] sext_ln192_reg_980;
wire   [0:0] icmp_ln188_fu_630_p2;
wire   [8:0] zext_ln192_17_fu_686_p1;
reg   [8:0] zext_ln192_17_reg_985;
wire   [1:0] i1_7_fu_696_p2;
reg   [1:0] i1_7_reg_993;
wire    ap_CS_fsm_state9;
wire   [8:0] or_ln2_fu_702_p5;
reg   [8:0] or_ln2_reg_998;
wire   [0:0] icmp_ln190_fu_690_p2;
wire   [9:0] zext_ln192_18_fu_714_p1;
reg   [9:0] zext_ln192_18_reg_1003;
wire   [5:0] i2_8_fu_728_p2;
reg   [5:0] i2_8_reg_1011;
wire    ap_CS_fsm_state10;
wire   [9:0] add_ln192_13_fu_743_p2;
reg   [9:0] add_ln192_13_reg_1016;
wire   [0:0] icmp_ln191_fu_722_p2;
wire   [1:0] i1_8_fu_777_p2;
reg   [1:0] i1_8_reg_1029;
wire    ap_CS_fsm_state12;
wire   [8:0] or_ln_fu_783_p5;
reg   [8:0] or_ln_reg_1034;
wire   [0:0] icmp_ln200_fu_771_p2;
wire   [8:0] sub_ln203_fu_819_p2;
reg   [8:0] sub_ln203_reg_1039;
wire   [5:0] i2_7_fu_835_p2;
reg   [5:0] i2_7_reg_1047;
wire    ap_CS_fsm_state13;
wire   [8:0] add_ln203_2_fu_851_p2;
reg   [8:0] add_ln203_2_reg_1052;
wire   [0:0] icmp_ln202_fu_829_p2;
reg   [7:0] tmpinput_V_address0;
reg    tmpinput_V_ce0;
reg    tmpinput_V_we0;
reg   [17:0] tmpinput_V_d0;
reg   [5:0] i0_0_reg_195;
reg   [1:0] i1_0_reg_207;
reg   [3:0] i2_0_reg_219;
wire    ap_CS_fsm_state7;
reg   [1:0] i0_0_i_reg_230;
reg   [1:0] i1_0_i_reg_241;
reg   [5:0] i2_0_i_reg_252;
wire    ap_CS_fsm_state11;
reg   [1:0] i11_0_i_reg_263;
reg   [5:0] i22_0_i_reg_274;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln248_fu_297_p1;
wire   [63:0] zext_ln203_54_fu_324_p1;
wire  signed [63:0] sext_ln252_fu_376_p1;
wire  signed [63:0] sext_ln255_4_fu_426_p1;
wire  signed [63:0] sext_ln203_fu_448_p1;
wire   [63:0] zext_ln203_64_fu_569_p1;
wire  signed [63:0] sext_ln203_50_fu_615_p1;
wire   [63:0] zext_ln203_61_fu_626_p1;
wire   [63:0] zext_ln192_4_fu_758_p1;
wire   [63:0] zext_ln192_fu_766_p1;
wire  signed [63:0] sext_ln203_51_fu_865_p1;
wire   [63:0] zext_ln203_fu_870_p1;
wire   [7:0] zext_ln203_53_fu_314_p1;
wire   [7:0] add_ln203_58_fu_318_p2;
wire   [1:0] xor_ln252_fu_335_p2;
wire   [7:0] tmp_183_fu_341_p3;
wire   [5:0] tmp_184_fu_353_p3;
wire   [8:0] zext_ln252_fu_349_p1;
wire   [8:0] zext_ln252_4_fu_361_p1;
wire   [8:0] sub_ln252_fu_365_p2;
wire   [8:0] add_ln252_fu_371_p2;
wire   [7:0] tmp_185_fu_387_p3;
wire   [5:0] tmp_186_fu_399_p3;
wire   [8:0] zext_ln255_9_fu_395_p1;
wire   [8:0] zext_ln255_10_fu_407_p1;
wire  signed [9:0] sext_ln255_3_fu_417_p1;
wire   [9:0] add_ln255_4_fu_421_p2;
wire  signed [10:0] sext_ln255_fu_434_p1;
wire   [10:0] add_ln203_59_fu_437_p2;
wire   [10:0] add_ln203_60_fu_443_p2;
wire   [4:0] tmp_191_fu_465_p3;
wire   [5:0] zext_ln203_59_fu_473_p1;
wire   [5:0] add_ln203_62_fu_477_p2;
wire   [4:0] trunc_ln203_fu_482_p1;
wire   [9:0] tmp_15_fu_494_p3;
wire   [10:0] p_shl_cast_fu_486_p3;
wire   [10:0] zext_ln203_60_fu_502_p1;
wire   [10:0] sub_ln203_6_fu_506_p2;
wire   [4:0] tmp_194_fu_517_p3;
wire   [5:0] zext_ln203_62_fu_525_p1;
wire   [5:0] add_ln203_64_fu_529_p2;
wire   [4:0] trunc_ln203_2_fu_534_p1;
wire   [9:0] tmp_16_fu_546_p3;
wire   [10:0] p_shl3_cast_fu_538_p3;
wire   [10:0] zext_ln203_63_fu_554_p1;
wire   [10:0] sub_ln203_7_fu_558_p2;
wire   [10:0] add_ln203_65_fu_564_p2;
wire   [1:0] sub_ln265_fu_574_p2;
wire   [7:0] tmp_189_fu_580_p3;
wire   [5:0] tmp_190_fu_592_p3;
wire   [8:0] zext_ln203_57_fu_588_p1;
wire   [8:0] zext_ln203_58_fu_600_p1;
wire   [8:0] sub_ln203_5_fu_604_p2;
wire   [8:0] add_ln203_61_fu_610_p2;
wire   [0:0] trunc_ln192_fu_642_p1;
wire   [6:0] shl_ln_fu_646_p3;
wire   [4:0] shl_ln192_5_fu_658_p3;
wire   [7:0] zext_ln192_15_fu_654_p1;
wire   [7:0] zext_ln192_16_fu_666_p1;
wire  signed [7:0] sub_ln192_fu_670_p2;
wire   [7:0] add_ln192_fu_680_p2;
wire   [8:0] zext_ln191_fu_718_p1;
wire   [8:0] add_ln192_14_fu_734_p2;
wire  signed [9:0] sext_ln192_5_fu_739_p1;
wire   [8:0] add_ln192_15_fu_748_p2;
wire   [8:0] add_ln192_16_fu_753_p2;
wire  signed [31:0] sext_ln192_4_fu_763_p1;
wire   [7:0] tmp_187_fu_795_p3;
wire   [5:0] tmp_188_fu_807_p3;
wire   [8:0] zext_ln203_55_fu_803_p1;
wire   [8:0] zext_ln203_56_fu_815_p1;
wire   [7:0] zext_ln202_fu_825_p1;
wire   [7:0] add_ln203_fu_841_p2;
wire   [8:0] zext_ln203_15_fu_847_p1;
wire   [8:0] zext_ln203_65_fu_856_p1;
wire   [8:0] add_ln203_66_fu_860_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

cnnshift_arr_ap_fixed_ap_fixed_18_8_5_3_0_config21_s_linevdy #(
    .DataWidth( 18 ),
    .AddressRange( 960 ),
    .AddressWidth( 10 ))
linebuffer_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuffer_V_8_address0),
    .ce0(linebuffer_V_8_ce0),
    .we0(linebuffer_V_8_we0),
    .d0(linebuffer_V_8_d0),
    .q0(linebuffer_V_8_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_18_8_5_3_0_config16_s_tmpircU #(
    .DataWidth( 18 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
tmpinput_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmpinput_V_address0),
    .ce0(tmpinput_V_ce0),
    .we0(tmpinput_V_we0),
    .d0(tmpinput_V_d0),
    .q0(tmpinput_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln246_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i0_0_i_reg_230 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_690_p2 == 1'd1))) begin
        i0_0_i_reg_230 <= i0_4_reg_975;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i0_0_reg_195 <= 6'd0;
    end else if (((icmp_ln250_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i0_0_reg_195 <= i0_reg_877;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_630_p2 == 1'd1))) begin
        i11_0_i_reg_263 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_829_p2 == 1'd1))) begin
        i11_0_i_reg_263 <= i1_8_reg_1029;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_722_p2 == 1'd1))) begin
        i1_0_i_reg_241 <= i1_7_reg_993;
    end else if (((icmp_ln188_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i1_0_i_reg_241 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1))) begin
        i1_0_reg_207 <= i1_fu_620_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_reg_207 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i22_0_i_reg_274 <= i2_7_reg_1047;
    end else if (((icmp_ln200_fu_771_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i22_0_i_reg_274 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i2_0_i_reg_252 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i2_0_i_reg_252 <= i2_8_reg_1011;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_219 <= i2_reg_952;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i2_0_reg_219 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln192_13_reg_1016 <= add_ln192_13_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_829_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln203_2_reg_1052 <= add_ln203_2_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln258_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln203_63_reg_957 <= add_ln203_63_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln255_reg_913 <= add_ln255_fu_381_p2;
        sub_ln255_reg_918[8 : 4] <= sub_ln255_fu_411_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i0_4_reg_975 <= i0_4_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i0_reg_877 <= i0_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_7_reg_993 <= i1_7_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_8_reg_1029 <= i1_8_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i2_7_reg_1047 <= i2_7_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_8_reg_1011 <= i2_8_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i2_reg_952 <= i2_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        linebuffer_V_8_addr_1_reg_939 <= sext_ln203_fu_448_p1;
        tmp1_V_reg_928 <= tmpinput_V_q0;
        tmp_V_reg_944 <= linebuffer_V_8_q0;
        zext_ln255_reg_933[1 : 0] <= zext_ln255_fu_431_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        or_ln2_reg_998[5 : 4] <= or_ln2_fu_702_p5[5 : 4];
or_ln2_reg_998[8 : 7] <= or_ln2_fu_702_p5[8 : 7];
        zext_ln192_18_reg_1003[5 : 4] <= zext_ln192_18_fu_714_p1[5 : 4];
zext_ln192_18_reg_1003[8 : 7] <= zext_ln192_18_fu_714_p1[8 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_771_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        or_ln_reg_1034[5 : 4] <= or_ln_fu_783_p5[5 : 4];
or_ln_reg_1034[8 : 7] <= or_ln_fu_783_p5[8 : 7];
        sub_ln203_reg_1039[8 : 4] <= sub_ln203_fu_819_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln188_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln192_reg_980[8 : 4] <= sext_ln192_fu_676_p1[8 : 4];
        zext_ln192_17_reg_985[7 : 4] <= zext_ln192_17_fu_686_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln203_50_reg_887[5 : 0] <= zext_ln203_50_fu_302_p1[5 : 0];
        zext_ln203_51_reg_894[5 : 0] <= zext_ln203_51_fu_306_p1[5 : 0];
        zext_ln203_52_reg_899[5 : 0] <= zext_ln203_52_fu_310_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_771_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_771_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_8_address0 = zext_ln203_61_fu_626_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1))) begin
        linebuffer_V_8_address0 = linebuffer_V_8_addr_1_reg_939;
    end else if (((icmp_ln258_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        linebuffer_V_8_address0 = zext_ln203_64_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuffer_V_8_address0 = sext_ln255_4_fu_426_p1;
    end else begin
        linebuffer_V_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1)) | ((icmp_ln258_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        linebuffer_V_8_ce0 = 1'b1;
    end else begin
        linebuffer_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuffer_V_8_d0 = linebuffer_V_8_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1))) begin
        linebuffer_V_8_d0 = tmp1_V_reg_928;
    end else begin
        linebuffer_V_8_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1)))) begin
        linebuffer_V_8_we0 = 1'b1;
    end else begin
        linebuffer_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_address0 = zext_ln203_fu_870_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_address0 = zext_ln192_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_address0 = zext_ln192_4_fu_758_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_d0 = tmpinput_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = output_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmpinput_V_address0 = sext_ln203_51_fu_865_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_address0 = sext_ln203_50_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpinput_V_address0 = sext_ln252_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_address0 = zext_ln203_54_fu_324_p1;
    end else begin
        tmpinput_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        tmpinput_V_ce0 = 1'b1;
    end else begin
        tmpinput_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmpinput_V_d0 = tmp_V_reg_944;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpinput_V_d0 = data_V_q0;
    end else begin
        tmpinput_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1)))) begin
        tmpinput_V_we0 = 1'b1;
    end else begin
        tmpinput_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln246_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln250_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln258_fu_453_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_630_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln190_fu_690_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln191_fu_722_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln200_fu_771_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln202_fu_829_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln192_13_fu_743_p2 = ($signed(sext_ln192_5_fu_739_p1) + $signed(zext_ln192_18_reg_1003));

assign add_ln192_14_fu_734_p2 = ($signed(sext_ln192_reg_980) + $signed(zext_ln191_fu_718_p1));

assign add_ln192_15_fu_748_p2 = (zext_ln192_17_reg_985 + zext_ln191_fu_718_p1);

assign add_ln192_16_fu_753_p2 = (add_ln192_15_fu_748_p2 + or_ln2_reg_998);

assign add_ln192_fu_680_p2 = ($signed(8'd48) + $signed(sub_ln192_fu_670_p2));

assign add_ln203_2_fu_851_p2 = (or_ln_reg_1034 + zext_ln203_15_fu_847_p1);

assign add_ln203_58_fu_318_p2 = (zext_ln203_53_fu_314_p1 + 8'd96);

assign add_ln203_59_fu_437_p2 = ($signed(sext_ln255_fu_434_p1) + $signed(11'd864));

assign add_ln203_60_fu_443_p2 = (add_ln203_59_fu_437_p2 + zext_ln203_50_reg_887);

assign add_ln203_61_fu_610_p2 = (sub_ln203_5_fu_604_p2 + zext_ln203_52_reg_899);

assign add_ln203_62_fu_477_p2 = (zext_ln255_reg_933 + zext_ln203_59_fu_473_p1);

assign add_ln203_63_fu_512_p2 = (zext_ln203_50_reg_887 + sub_ln203_6_fu_506_p2);

assign add_ln203_64_fu_529_p2 = (zext_ln255_reg_933 + zext_ln203_62_fu_525_p1);

assign add_ln203_65_fu_564_p2 = (zext_ln203_50_reg_887 + sub_ln203_7_fu_558_p2);

assign add_ln203_66_fu_860_p2 = (sub_ln203_reg_1039 + zext_ln203_65_fu_856_p1);

assign add_ln203_fu_841_p2 = (zext_ln202_fu_825_p1 + 8'd96);

assign add_ln252_fu_371_p2 = (sub_ln252_fu_365_p2 + zext_ln203_52_reg_899);

assign add_ln255_4_fu_421_p2 = ($signed(sext_ln255_3_fu_417_p1) + $signed(zext_ln203_51_reg_894));

assign add_ln255_fu_381_p2 = ($signed(i1_0_reg_207) + $signed(2'd3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_V_address0 = zext_ln248_fu_297_p1;

assign i0_4_fu_636_p2 = (i0_0_i_reg_230 + 2'd1);

assign i0_fu_291_p2 = (i0_0_reg_195 + 6'd1);

assign i1_7_fu_696_p2 = (i1_0_i_reg_241 + 2'd1);

assign i1_8_fu_777_p2 = (i11_0_i_reg_263 + 2'd1);

assign i1_fu_620_p2 = (i1_0_reg_207 + 2'd1);

assign i2_7_fu_835_p2 = (i22_0_i_reg_274 + 6'd1);

assign i2_8_fu_728_p2 = (i2_0_i_reg_252 + 6'd1);

assign i2_fu_459_p2 = (i2_0_reg_219 + 4'd1);

assign icmp_ln188_fu_630_p2 = ((i0_0_i_reg_230 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_690_p2 = ((i1_0_i_reg_241 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_722_p2 = ((i2_0_i_reg_252 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_771_p2 = ((i11_0_i_reg_263 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_829_p2 = ((i22_0_i_reg_274 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_285_p2 = ((i0_0_reg_195 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_329_p2 = ((i1_0_reg_207 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_453_p2 = ((i2_0_reg_219 == 4'd9) ? 1'b1 : 1'b0);

assign or_ln2_fu_702_p5 = {{{{i1_0_i_reg_241}, {1'd0}}, {i1_0_i_reg_241}}, {4'd0}};

assign or_ln_fu_783_p5 = {{{{i11_0_i_reg_263}, {1'd0}}, {i11_0_i_reg_263}}, {4'd0}};

assign p_shl3_cast_fu_538_p3 = {{trunc_ln203_2_fu_534_p1}, {6'd0}};

assign p_shl_cast_fu_486_p3 = {{trunc_ln203_fu_482_p1}, {6'd0}};

assign sext_ln192_4_fu_763_p1 = $signed(add_ln192_13_reg_1016);

assign sext_ln192_5_fu_739_p1 = $signed(add_ln192_14_fu_734_p2);

assign sext_ln192_fu_676_p1 = sub_ln192_fu_670_p2;

assign sext_ln203_50_fu_615_p1 = $signed(add_ln203_61_fu_610_p2);

assign sext_ln203_51_fu_865_p1 = $signed(add_ln203_66_fu_860_p2);

assign sext_ln203_fu_448_p1 = $signed(add_ln203_60_fu_443_p2);

assign sext_ln252_fu_376_p1 = $signed(add_ln252_fu_371_p2);

assign sext_ln255_3_fu_417_p1 = sub_ln255_fu_411_p2;

assign sext_ln255_4_fu_426_p1 = $signed(add_ln255_4_fu_421_p2);

assign sext_ln255_fu_434_p1 = sub_ln255_reg_918;

assign shl_ln192_5_fu_658_p3 = {{trunc_ln192_fu_642_p1}, {4'd0}};

assign shl_ln_fu_646_p3 = {{trunc_ln192_fu_642_p1}, {6'd0}};

assign sub_ln192_fu_670_p2 = (zext_ln192_15_fu_654_p1 - zext_ln192_16_fu_666_p1);

assign sub_ln203_5_fu_604_p2 = (zext_ln203_57_fu_588_p1 - zext_ln203_58_fu_600_p1);

assign sub_ln203_6_fu_506_p2 = (p_shl_cast_fu_486_p3 - zext_ln203_60_fu_502_p1);

assign sub_ln203_7_fu_558_p2 = (p_shl3_cast_fu_538_p3 - zext_ln203_63_fu_554_p1);

assign sub_ln203_fu_819_p2 = (zext_ln203_55_fu_803_p1 - zext_ln203_56_fu_815_p1);

assign sub_ln252_fu_365_p2 = (zext_ln252_fu_349_p1 - zext_ln252_4_fu_361_p1);

assign sub_ln255_fu_411_p2 = (zext_ln255_9_fu_395_p1 - zext_ln255_10_fu_407_p1);

assign sub_ln265_fu_574_p2 = ($signed(2'd2) - $signed(i1_0_reg_207));

assign tmp_15_fu_494_p3 = {{add_ln203_62_fu_477_p2}, {4'd0}};

assign tmp_16_fu_546_p3 = {{add_ln203_64_fu_529_p2}, {4'd0}};

assign tmp_183_fu_341_p3 = {{xor_ln252_fu_335_p2}, {6'd0}};

assign tmp_184_fu_353_p3 = {{xor_ln252_fu_335_p2}, {4'd0}};

assign tmp_185_fu_387_p3 = {{add_ln255_fu_381_p2}, {6'd0}};

assign tmp_186_fu_399_p3 = {{add_ln255_fu_381_p2}, {4'd0}};

assign tmp_187_fu_795_p3 = {{i11_0_i_reg_263}, {6'd0}};

assign tmp_188_fu_807_p3 = {{i11_0_i_reg_263}, {4'd0}};

assign tmp_189_fu_580_p3 = {{sub_ln265_fu_574_p2}, {6'd0}};

assign tmp_190_fu_592_p3 = {{sub_ln265_fu_574_p2}, {4'd0}};

assign tmp_191_fu_465_p3 = {{i2_0_reg_219}, {1'd0}};

assign tmp_194_fu_517_p3 = {{i2_fu_459_p2}, {1'd0}};

assign trunc_ln192_fu_642_p1 = i0_0_i_reg_230[0:0];

assign trunc_ln203_2_fu_534_p1 = add_ln203_64_fu_529_p2[4:0];

assign trunc_ln203_fu_482_p1 = add_ln203_62_fu_477_p2[4:0];

assign xor_ln252_fu_335_p2 = (i1_0_reg_207 ^ 2'd3);

assign zext_ln191_fu_718_p1 = i2_0_i_reg_252;

assign zext_ln192_15_fu_654_p1 = shl_ln_fu_646_p3;

assign zext_ln192_16_fu_666_p1 = shl_ln192_5_fu_658_p3;

assign zext_ln192_17_fu_686_p1 = add_ln192_fu_680_p2;

assign zext_ln192_18_fu_714_p1 = or_ln2_fu_702_p5;

assign zext_ln192_4_fu_758_p1 = add_ln192_16_fu_753_p2;

assign zext_ln192_fu_766_p1 = $unsigned(sext_ln192_4_fu_763_p1);

assign zext_ln202_fu_825_p1 = i22_0_i_reg_274;

assign zext_ln203_15_fu_847_p1 = add_ln203_fu_841_p2;

assign zext_ln203_50_fu_302_p1 = i0_0_reg_195;

assign zext_ln203_51_fu_306_p1 = i0_0_reg_195;

assign zext_ln203_52_fu_310_p1 = i0_0_reg_195;

assign zext_ln203_53_fu_314_p1 = i0_0_reg_195;

assign zext_ln203_54_fu_324_p1 = add_ln203_58_fu_318_p2;

assign zext_ln203_55_fu_803_p1 = tmp_187_fu_795_p3;

assign zext_ln203_56_fu_815_p1 = tmp_188_fu_807_p3;

assign zext_ln203_57_fu_588_p1 = tmp_189_fu_580_p3;

assign zext_ln203_58_fu_600_p1 = tmp_190_fu_592_p3;

assign zext_ln203_59_fu_473_p1 = tmp_191_fu_465_p3;

assign zext_ln203_60_fu_502_p1 = tmp_15_fu_494_p3;

assign zext_ln203_61_fu_626_p1 = add_ln203_63_reg_957;

assign zext_ln203_62_fu_525_p1 = tmp_194_fu_517_p3;

assign zext_ln203_63_fu_554_p1 = tmp_16_fu_546_p3;

assign zext_ln203_64_fu_569_p1 = add_ln203_65_fu_564_p2;

assign zext_ln203_65_fu_856_p1 = i22_0_i_reg_274;

assign zext_ln203_fu_870_p1 = add_ln203_2_reg_1052;

assign zext_ln248_fu_297_p1 = i0_0_reg_195;

assign zext_ln252_4_fu_361_p1 = tmp_184_fu_353_p3;

assign zext_ln252_fu_349_p1 = tmp_183_fu_341_p3;

assign zext_ln255_10_fu_407_p1 = tmp_186_fu_399_p3;

assign zext_ln255_9_fu_395_p1 = tmp_185_fu_387_p3;

assign zext_ln255_fu_431_p1 = add_ln255_reg_913;

always @ (posedge ap_clk) begin
    zext_ln203_50_reg_887[10:6] <= 5'b00000;
    zext_ln203_51_reg_894[9:6] <= 4'b0000;
    zext_ln203_52_reg_899[8:6] <= 3'b000;
    sub_ln255_reg_918[3:0] <= 4'b0000;
    zext_ln255_reg_933[5:2] <= 4'b0000;
    sext_ln192_reg_980[3:0] <= 4'b0000;
    zext_ln192_17_reg_985[3:0] <= 4'b0000;
    zext_ln192_17_reg_985[8] <= 1'b0;
    or_ln2_reg_998[3:0] <= 4'b0000;
    or_ln2_reg_998[6] <= 1'b0;
    zext_ln192_18_reg_1003[3:0] <= 4'b0000;
    zext_ln192_18_reg_1003[6:6] <= 1'b0;
    zext_ln192_18_reg_1003[9] <= 1'b0;
    or_ln_reg_1034[3:0] <= 4'b0000;
    or_ln_reg_1034[6] <= 1'b0;
    sub_ln203_reg_1039[3:0] <= 4'b0000;
end

endmodule //cnnshift_arr_ap_fixed_ap_fixed_18_8_5_3_0_config21_s
